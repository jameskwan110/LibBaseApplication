package com.kwan.base.mvp.model.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kwan.base.common.bean.DownLoadFileBlockBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWN_LOAD_THREAD_BEAN".
*/
public class DownLoadThreadBeanDao extends AbstractDao<DownLoadFileBlockBean, Long> {

    public static final String TABLENAME = "DOWN_LOAD_THREAD_BEAN";

    /**
     * Properties of entity DownLoadFileBlockBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Range = new Property(1, Long.class, "range", false, "RANGE");
        public final static Property Start = new Property(2, Long.class, "start", false, "START");
        public final static Property End = new Property(3, Long.class, "end", false, "END");
        public final static Property ThreadNum = new Property(4, String.class, "threadNum", false, "THREADNUM");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
        public final static Property Finished = new Property(6, int.class, "finished", false, "FINISHED");
    }


    public DownLoadThreadBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DownLoadThreadBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWN_LOAD_THREAD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"RANGE\" INTEGER," + // 1: range
                "\"START\" INTEGER," + // 2: start
                "\"END\" INTEGER," + // 3: end
                "\"THREADNUM\" TEXT," + // 4: threadNum
                "\"URL\" TEXT," + // 5: url
                "\"FINISHED\" INTEGER NOT NULL );"); // 6: finished
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWN_LOAD_THREAD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownLoadFileBlockBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long range = entity.getRange();
        if (range != null) {
            stmt.bindLong(2, range);
        }
 
        Long start = entity.getStart();
        if (start != null) {
            stmt.bindLong(3, start);
        }
 
        Long end = entity.getEnd();
        if (end != null) {
            stmt.bindLong(4, end);
        }
 
        String threadNum = entity.getThreadNum();
        if (threadNum != null) {
            stmt.bindString(5, threadNum);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
        stmt.bindLong(7, entity.getFinished());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownLoadFileBlockBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long range = entity.getRange();
        if (range != null) {
            stmt.bindLong(2, range);
        }
 
        Long start = entity.getStart();
        if (start != null) {
            stmt.bindLong(3, start);
        }
 
        Long end = entity.getEnd();
        if (end != null) {
            stmt.bindLong(4, end);
        }
 
        String threadNum = entity.getThreadNum();
        if (threadNum != null) {
            stmt.bindString(5, threadNum);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
        stmt.bindLong(7, entity.getFinished());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownLoadFileBlockBean readEntity(Cursor cursor, int offset) {
        DownLoadFileBlockBean entity = new DownLoadFileBlockBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // range
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // start
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // end
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // threadNum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // url
            cursor.getInt(offset + 6) // finished
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownLoadFileBlockBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRange(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setStart(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setEnd(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setThreadNum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFinished(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownLoadFileBlockBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownLoadFileBlockBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownLoadFileBlockBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
